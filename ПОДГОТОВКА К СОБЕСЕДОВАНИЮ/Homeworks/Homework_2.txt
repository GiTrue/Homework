def check_brackets_balance(sequence):
    """
    Проверяет сбалансированность скобочной последовательности с помощью стека.
    
    Параметры:
        sequence (str): Строка со скобками для проверки.
        
    Возвращает:
        str: "Сбалансированно" или "Несбалансированно".
    """
    
    # 1. Создаем пустой стек
    s = Stack()
    
    # Словари для удобного сопоставления открывающих и закрывающих скобок
    open_brackets = "([{"
    # Ключ - закрывающая скобка, Значение - соответствующая ей открывающая
    bracket_pairs = {")": "(", "]": "[", "}": "{"}

    # 2. Перебираем строку символ за символом
    for char in sequence:
        
        # 3. Если символ - открывающая скобка, добавляем в стек
        if char in open_brackets:
            s.push(char)
        
        # 4. Если символ - закрывающая скобка
        elif char in bracket_pairs:
            
            # 4.1. Проверка на пустоту
            if s.is_empty():
                return "Несбалансированно" # Закрывающая без пары
            
            # 4.2. Удаляем верхний элемент и проверяем парность
            top_bracket = s.pop()
            
            # Проверяем, соответствует ли извлеченная открывающая скобка текущей закрывающей
            if top_bracket != bracket_pairs[char]:
                return "Несбалансированно" # Неправильная пара
                
    # 5. После обработки всей строки, проверяем, пуст ли стек
    if s.is_empty():
        return "Сбалансированно" # Все открывающие скобки закрыты
    else:
        return "Несбалансированно" # Остались незакрытые открывающие скобки

# Примеры использования
test_cases = [
    "(((([{}]))))",
    "[([])((([[[]]])))]{()}",
    "{{[()]}}",
    "}{",
    "{{[(])]}}",
    "[[{())}]",
    "", # Пустая строка
    "({)}", # Неправильное вложение
    "[[",
    "()([]){}[{}]"
]

print("--- Тестирование ---")
for expression in test_cases:
    result = check_brackets_balance(expression)
    print(f"Строка: '{expression}' -> {result}")