1. Реализация класса Stack
Для реализации стека в Python удобно использовать встроенный тип данных list, так как его операции append() и pop() идеально соответствуют принципу LIFO (последним пришёл — первым вышел).


2. Проверка сбалансированности скобок с помощью стека
Для проверки сбалансированности скобок мы будем использовать следующий алгоритм:

2.1 Создадим пустой стек.

2.2 Переберём строку символ за символом.

2.3 Если символ является открывающей скобкой ((, [, {), мы добавляем его в стек (операция push).

2.4 Если символ является закрывающей скобкой (), ], }):

   Сначала проверим, пуст ли стек. Если пуст, значит, найдена закрывающая скобка без соответствующей открывающей, и       строка несбалансирована.

   Если стек не пуст, мы удаляем верхний элемент из стека (операция pop) и проверяем, является ли эта открывающая  скобка парной текущей закрывающей.

   Если они не парные, строка несбалансирована.

2.5 После того как все символы строки обработаны, строка сбалансирована только в том случае, если стек пуст. Если в стеке остались открывающие скобки, значит, они не имеют соответствующих закрывающих, и строка несбалансирована.



3. Рефакторинг: Класс EmailClient (PEP8-совместимый)

3.1 Создан класс EmailClient.

3.2 Созданы методы send_message и fetch_latest_message.

3.3 "Захардкоженные" логин, пароль и адреса серверов вынесены в атрибуты класса или аргументы методов.

3.4 Именование переменных и общий код соответствуют стандарту PEP8.

3.5 Инициализация (настройка логина и серверов) происходит в конструкторе __init__.

