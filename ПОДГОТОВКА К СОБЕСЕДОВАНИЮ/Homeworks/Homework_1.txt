class Stack:
    """
    Реализация абстрактного типа данных Стек (Stack) 
    с использованием принципа LIFO (Last In, First Out).
    """
    def __init__(self):
        """
        Инициализирует пустой стек, используя внутренний список.
        """
        # Стек будет представлен списком. Вершина стека — это конец списка.
        self.items = []

    def is_empty(self):
        """
        Проверяет стек на пустоту.
        Возвращает: 
            bool: True, если стек пуст, иначе False.
        """
        return not self.items # или len(self.items) == 0

    def push(self, item):
        """
        Добавляет новый элемент на вершину стека (в конец списка).
        Параметры:
            item: Элемент, который нужно добавить.
        """
        self.items.append(item)

    def pop(self):
        """
        Удаляет и возвращает верхний элемент стека.
        Вызывает IndexError, если стек пуст.
        Возвращает: 
            object: Верхний элемент стека.
        """
        if not self.is_empty():
            return self.items.pop()
        else:
            raise IndexError("pop из пустого стека")

    def peek(self):
        """
        Возвращает верхний элемент стека, но не удаляет его.
        Вызывает IndexError, если стек пуст.
        Возвращает: 
            object: Верхний элемент стека.
        """
        if not self.is_empty():
            # Возвращаем последний элемент списка без его удаления
            return self.items[-1]
        else:
            raise IndexError("peek из пустого стека")

    def size(self):
        """
        Возвращает количество элементов в стеке.
        Возвращает: 
            int: Количество элементов.
        """
        return len(self.items)